# Be aware that YAML has indentation based scoping.
# Code completion support is available so start typing for available options.
swagger: '2.0'

# document metadata
info:
  version: "0.0.1"
  title: Intelligent Provisioner API (Carbon Provisioner Service API)
  description: The Intelligent Provisioner API definition created using swagger-2.0 specification
  contact:
    name: Red Hat Product Interoperability Testing Team
    email: qe-pit@redhat.com
    url: https://docs.engineering.redhat.com/display/PIT/Provisioning+Service

# during dev, should point to your local machine
host: api.carbon.qe.redhat.com

# basePath prefixes all resource paths
basePath: /v1

schemes:
  # tip: remove http to make production-grade
  - http
  - https

# api key should be used for all calls


securityDefinitions:
   # server will respond to requests with API key set in header
   APIKeyHeader:
     type: apiKey
     in: header
     name: X-API-Key

paths:

  /status:
    get:
      description: |
        Returns the status of many services used by the provisioner such as
        provider status, version and response time.
      produces:
        - application/json

      responses:
        "200":
          description: Success

  /jobs:
    post:
      description: |
        Create a `Job` object and starts the provisioning of the nodes
        described in the body of the message.
      security:
        - APIKeyHeader: []
      consumes:
        - application/json
      produces:
        - application/json

      parameters:
        - name: nodes
          in: body
          description: Size of array
          required: true
          schema:
            $ref: "#/definitions/Nodes"

      responses:
        "202":
          description: Job accepted
          schema:
            $ref: "#/definitions/Jobs"
        "400":
          description: The request is not valid
        "403":
          description: Not authorized or API key is invalid

    get:
      description: |
        Returns a list of the jobs associated to the `X-API-Key` that has
        not finished yet.
      security:
        - APIKeyHeader: []
      produces:
        - application/json

      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Jobs'

  /jobs/{id}:
    get:
      description: Returns the information of the job specified by the `id`
      security:
        - APIKeyHeader: []
      consumes:
        - application/json
      produces:
        - application/json

      parameters:
        - name: id
          in: path
          description: The unique ID for the job
          required: true
          type: string


      responses:
        "200":
          description: Success
    put:
      description: Adds one or more node the job specified by the `id`
      security:
        - APIKeyHeader: []
      consumes:
        - application/json
      produces:
        - application/json

      parameters:
        - name: id
          in: path
          description: The unique ID for the job
          required: true
          type: string
        - name: nodes
          in: body
          description: Size of array
          required: true
          schema:
            $ref: "#/definitions/Nodes"

      responses:
        "200":
          description: Success

  /jobs/{id}/logs:
    get:
      description: Returns the log for the job specified by the `id`
      security:
        - APIKeyHeader: []
      produces:
        - application/json

      parameters:
        - name: id
          in: path
          description: The unique ID for the job
          required: true
          type: string

      responses:
        "200":
          description: Success

  /jobs/{id}/nodes:
    get:
      description: Returns the list of nodes associated with the job specified by the `id`
      security:
        - APIKeyHeader: []
      produces:
        - application/json

      parameters:
        - name: id
          in: path
          description: The unique ID for the job
          required: true
          type: string

      responses:
        "200":
          description: Success

  /jobs/{id}/nodes/{nid}:
    get:
      description: |
        Returns the node information for the node associated with the node specified
        by the `nid` within the job specified by the `id`
      security:
        - APIKeyHeader: []
      produces:
        - application/json

      parameters:
        - name: id
          in: path
          description: The unique ID for the job
          required: true
          type: string
        - name: nid
          in: path
          description: The unique ID for the node
          required: true
          type: string

      responses:
        "200":
          description: Success

  /jobs/{id}/nodes/{nid}/logs:
    get:
      description: |
        Returns the node logs for the node associated with the node specified
        by the `nid` within the job specified by the `id`
      security:
        - APIKeyHeader: []
      produces:
        - application/json

      parameters:
        - name: id
          in: path
          description: The unique ID for the job
          required: true
          type: string
        - name: nid
          in: path
          description: The unique ID for the node
          required: true
          type: string

      responses:
        "200":
          description: Success

  /jobs/{id}/nodes/{nid}/status:
    get:
      description: |
        Returns the node status for the node associated with the node specified
        by the `nid` within the job specified by the `id`
      security:
        - APIKeyHeader: []
      produces:
        - application/json

      parameters:
        - name: id
          in: path
          description: The unique ID for the job
          required: true
          type: string
        - name: nid
          in: path
          description: The unique ID for the node
          required: true
          type: string

      responses:
        "200":
          description: Success

  /jobs/{id}/nodes/{nid}/teardown:
    post:
      description: |
        Initiates the teardown process for the node specified by the `nid` within the
        job specified by the `id`
      security:
        - APIKeyHeader: []
      consumes:
        - application/json
      produces:
        - application/json

      parameters:
        - name: id
          in: path
          description: The unique ID for the job
          required: true
          type: string
        - name: nid
          in: path
          description: The unique ID for the node
          required: true
          type: string

      responses:
        "202":
          description: Success

  /jobs/{id}/teardown:
    post:
      description: |
        Initiates the teardown process for all the nodes listed within the
        job specified by the `id`
      security:
        - APIKeyHeader: []
      consumes:
        - application/json
      produces:
        - application/json

      parameters:
        - name: id
          in: path
          description: The unique ID for the job
          required: true
          type: string

      responses:
        "202":
          description: Success

definitions:

  Jobs:
    title: Jobs
    type: object
    properties:
      id:
        type: string
        description: Unique identifier for the job
      nodes:
        minItems: 1
        type: array
        items:
          $ref: "#/definitions/Node"

  Nodes:
    title: Nodes
    type: array
    minItems: 1
    items:
      $ref: "#/definitions/Node"

  Node:
    type: object
    enum:
      - $ref: "#/definitions/OpenstackNode"
      - $ref: "#/definitions/OpenshiftNode"

  NodeStatus:
    type: string
    enum:
      - BUILDING
      - FAILED
      - QUEUED
      - DROPPED
      - RUNNING

  OpenstackNode:
    title: Openstack
    type: object
    required:
      - name
      - flavor
      - image
    properties:
      id:
        type: string
      name:
        type: string
      flavor:
        type: string
      image:
        type: string
      status:
        $ref: "#/definitions/NodeStatus"

  OpenshiftNode:
    title: Openshift
    type: object
    required:
      - name
    properties:
      id:
        type: string
      name:
        type: string
      status:
        $ref: "#/definitions/NodeStatus"
