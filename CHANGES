Version 1.0.5 (2019-02-6)
--------------------------

Bug Fixes
~~~~~~~~~

* Permanently decoding subprocess output to utf-8

* No longer fail in the execute phase when gathering an artifact that doesn't exist.
  Now log which were successfully collected, which were skipped due to not existing,
  and which failed due to external reasons.

* Strip all carriage returns when processing script or shell command output in the
  execute phase.

* Anisble verbosity will always default to a single (-v) and can now be
  configured to any ansible supported level in the carbon.cfg file independent of
  carbon log level.

* If a cleanup task is specified for a run and carbon fails at some point before
  that cleanup task is launched, carbon will launch the cleanup task so
  as to not leave stale resources behind.

Enhancement
~~~~~~~~~~

* Added to Beaker Credentials the optional parameter, ca_path, to allow a user to
  specify a path to a trusted CA file.

* Added to Beaker support for the host_requires_option, force=<FQDN>, to facilitate
  forcing the selection of a host regardless of state.

* Added more logging and exception handling enhancements.

Version 1.0.4 (2019-01-23)
--------------------------

Bug Fixes
~~~~~~~~~

* Needed to decode the subprocess output when running ansible playbooks

Version 1.0.3 (2018-12-5)
--------------------------

Bug Fixes
~~~~~~~~~

* Do not attempt to attach a floating ip to an OpenStack instance if the floating_ip_pool parameter is not specified

Enhancment
~~~~~~~~~~

* General provisioning support on the latest OpenStack Cloud environment  

Version 1.0.2 (2018-10-29)
--------------------------

Bug Fixes
~~~~~~~~~

* allow host resources to contain uppercase letters

Version 1.0.1 (2018-10-02)
--------------------------

Bug Fixes
~~~~~~~~~

* removes filtering host resource names

Version 1.0.0 (2018-10-01)
--------------------------

Features
~~~~~~~~

* configuration for scenario execution
* use user defined ansible configuration
* ability to consume and use ansible roles
* input validation & defined descriptor structure
* resource checking
* internal provisioning (OpenStack and Beaker)
* ansible orchestration using ansible.
* execution support (cmd, script, or playbook)
